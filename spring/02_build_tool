▶ build 란?
    : 소스 코드를 실행 가능한 형태로 컴파일하고 패키징하는 과정.

▶ build의 핵심 4단계
    컴파일 (Compile) : 개발자가 작성한 소스 코드(예: .java 파일)를 컴퓨터(JVM)가 이해하고 실행할 수 있는 바이너리 코드 형태(예: .class 파일)로 변환하는 단계.
                      빌드의 시작점.
    의존성 관리 (Dependency Management) : 프로젝트가 외부에서 가져와 사용하는 모든 라이브러리나 모듈(예: Spring, Lombok, Chart.js 등)을 자동으로 다운로드하고 관리함.
                                          빌드 도구는 설정 파일(예: pom.xml 또는 build.gradle)을 읽어 필요한 라이브러리들을
                                          인터넷 중앙 저장소(Maven Central 등)에서 가져와서 프로젝트에 연결함.
    테스트 (Test) : 개발자가 작성한 단위 테스트(Unit Test)나 통합 테스트(Integration Test) 코드를 실행하여,
                    최종 결과물이 나오기 전에 애플리케이션이 의도한 대로 작동하는지 검증.
    패키징 (Packaging) : 컴파일된 코드와 필요한 모든 자원(설정 파일, 이미지, 웹 자원 등), 그리고 의존성 라이브러리들을 하나로 묶어 배포 가능한 파일 형식으로 만드는 단계.
                        Java 웹 프로젝트의 경우 주로 JAR (Java Archive) 또는 WAR (Web Archive) 파일 형태의 최종 결과물로 만들어짐.

▶ Maven
    빌드 모델 : 정해진 라이프사이클(Life Cycle) 기반으로 작동.
    성능 : 상대적으로 느림.
    설정 파일 : pom.xml 사용.
    사용 언어 : XML 기반의 선언적(Declarative) 방식.
    가독성/유연성 : 설정이 복잡해지면 가독성이 떨어지고, 라이프사이클에 묶여 유연성이 낮음.
    핵심 : 정형화된 구조와 안정성을 제공.

    설정파일 : 

▶ Gradle
    빌드 모델 : 태스크 그래프(Task Graph) 기반으로 작동.
    성능 : 빌드 캐시 및 증분 빌드로 인해 빠름.
    설정 파일 : build.gradle 사용.
    사용 언어 : Groovy 또는 Kotlin DSL 기반의 스크립트적(Scriptable) 방식.
    가독성/유연성 : 스크립트 언어를 사용해 코드가 간결하고, 커스텀 로직 추가가 용이하여 유연성이 높음.
    핵심 : 빠른 속도와 높은 유연성, 간결한 설정이 장점.

▶ Maven vs Gradle
    : 둘 다 빌드 도구로서 하는 역할은 같지만, Gradle(그레이들)이 더 최근에 생긴 빌드 도구.
    : Gradle은 변경된 파일만 빌드하고, 빌드했던 결과를 재사용하는 빌드 캐시 기능을 제공함.
    : 때문에 대규모 프로젝트나, 반복적인 개발 작업에서는 Maven보다 훨씬 빠른 빌드 속도를 보임.
    : 또한, Maven이 XML 기반의 장황한 선언적 방식을 사용하는 반면,
      Gradle은 Groovy/Kotlin DSL 기반의 간결하고 유연한 스크립트적 방식을 사용하여 설정의 가독성이 높고 작성이 용이함.
